---
apiVersion: v1
kind: Namespace
metadata:
  name: kafka
  labels:
    section: tools
    app: kafka
---
apiVersion: v1
kind: LimitRange
metadata:
  name: mem-limit-range
  namespace: kafka
spec:
  limits:
  - default:
      memory: 1Gi
      cpu: "1"
    defaultRequest:
      memory: 512Mi
      cpu: "0.5"
    max:
      memory: 2Gi
      cpu: "2"
    type: Container
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka
spec:
  ports:
    - port: 2181
  clusterIP: None
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
spec:
  serviceName: "zookeeper"
  replicas: 3
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: zookeeper:3.6.3
        ports:
        - containerPort: 2181
        env:
        - name: ZOO_MY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['ordinal']
        - name: ZOO_SERVERS
          value: server.1=zookeeper-0.zookeeper.kafka.svc.cluster.local:2888:3888;zookeeper-0.zookeeper.kafka.svc.cluster.local:2181 server.2=zookeeper-1.zookeeper.kafka.svc.cluster.local:2888:3888;zookeeper-1.zookeeper.kafka.svc.cluster.local:2181 server.3=zookeeper-2.zookeeper.kafka.svc.cluster.local:2888:3888;zookeeper-2.zookeeper.kafka.svc.cluster.local:2181
        volumeMounts:
        - name: data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka
spec:
  ports:
    - port: 9092
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  serviceName: "kafka"
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka:2.12-2.5.0
        ports:
        - containerPort: 9092
        env:
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper.kafka.svc.cluster.local:2181
          - name: KAFKA_LISTENERS
            value: PLAINTEXT://0.0.0.0:9092
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://kafka-0.kafka.kafka.svc.cluster.local:9092
          - name: KAFKA_BROKER_ID
            value: "0"
        volumeMounts:
        - name: data
          mountPath: /kafka-logs
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-ingress
  namespace: kafka
  labels:
    app: kafka
  annotations:
    cert-manager.io/cluster-issuer: dev-ca-issuer
    cert-manager.io/common-name: kafka.dpetrenko.ru
    cert-manager.io/subject-organizations: "home dev lab"
    cert-manager.io/subject-countries: "RU"
    cert-manager.io/subject-localities: "Voronezh"
    cert-manager.io/duration: "9125h"
    cert-manager.io/renew-before: "360h"
    cert-manager.io/usages: "server auth"
    cert-manager.io/private-key-algorithm: RSA
    cert-manager.io/private-key-encoding: "PKCS8"
    cert-manager.io/private-key-size: "4096"
    cert-manager.io/private-key-rotation-policy: Always
    nginx.ingress.kubernetes.io/proxy-body-size: 1g
spec:
  ingressClassName: "system-ingress"
  rules:
    - host: kafka.dpetrenko.ru
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kafka
                port:
                  number: 9092
  tls:
    - hosts:
      - kafka.dpetrenko.ru
      secretName: kafka-tls
